#include <gtest/gtest.h>
#include <array>

#include "sm_signature.h"
#include "sm_digest.h"
#include "sm_rng.h"
#include "sm_asymmetric_key.h"
#include "sm_common.h"

#define TEST_RSA_KEY_SIZE (256u)
#define TEST_RSA_PUBLIC_EXPONENT_SIZE (4u)
#define TEST_RSA_SIGNATURE_SIZEE (256u)

class SignatureRsaTest : public testing::Test
{
protected:
	SignatureRsaTest() = default;
	~SignatureRsaTest() = default;

	void SetUp() override
	{
		generate_random(&message);
	}

	void TearDown() override
	{
	}

	std::array<uint8_t, 256> buf = {0};
	Buffer message = {.ptr = buf.data(), .size = buf.size()};
};

TEST_F(SignatureRsaTest, RSA_PKCS)
{
	bool result = false;

	uint8_t pri_e[TEST_RSA_KEY_SIZE] = {0};
    uint8_t mod_n[TEST_RSA_KEY_SIZE] = {0};
    uint8_t pub_e[TEST_RSA_PUBLIC_EXPONENT_SIZE] = {0};

    Buffer buf_pri = {.ptr = pri_e, .size = sizeof(pri_e)};
    Buffer buf_pub = {.ptr = pub_e, .size = sizeof(pub_e)};
    Buffer buf_mod = {.ptr = mod_n, .size = sizeof(mod_n)};

	uint8_t sig[TEST_RSA_SIGNATURE_SIZEE] = {0};
    Buffer buf_sig = {.ptr = sig, .size = sizeof(sig)};

	generate_rsa_key(2048, &buf_pri, &buf_mod, &buf_pub);
	rsa_pkcs1_sign(&buf_pri, &buf_pub, &buf_mod, &message, DIGEST_SHA256_SIZE, &buf_sig);
	print_hex("RSA PKCS#1 SIGNATURE", buf_sig.ptr, buf_sig.size);

	result = rsa_pkcs1_verify(&buf_pub, &buf_mod, &message, DIGEST_SHA256_SIZE, &buf_sig);
	ASSERT_EQ(result, true);
}

TEST_F(SignatureRsaTest, RSA_PKCS_FIXED_KEY)
{
	bool result = false;

	unsigned char mod_n[TEST_RSA_KEY_SIZE] = {
        0xEF, 0x5F, 0x69, 0xDA, 0xA5, 0xB9, 0x13, 0xC9, 0x82, 0x8B, 0xBD, 0xFF, 0xE0, 0x60, 0xA7, 0xD8,
        0xB9, 0x50, 0x8B, 0x0A, 0x7E, 0x2B, 0x8C, 0x86, 0x1A, 0x95, 0x3C, 0x16, 0xBD, 0x57, 0x4D, 0x3F,
        0xCD, 0xBC, 0xE3, 0x3C, 0x71, 0xB5, 0x29, 0xDA, 0x85, 0x28, 0x6E, 0xF1, 0x75, 0x42, 0x15, 0xC6,
        0xFB, 0x2A, 0x62, 0xD9, 0x17, 0x78, 0x3E, 0xC1, 0x83, 0xDD, 0x21, 0x27, 0x40, 0x30, 0x14, 0xC5,
        0x67, 0x46, 0xE6, 0x5C, 0xCC, 0xBF, 0x48, 0x41, 0xA7, 0xF8, 0xC1, 0x10, 0xEC, 0x3A, 0x7C, 0x63,
        0xED, 0xF8, 0x6D, 0x12, 0x2B, 0x4B, 0xA0, 0x13, 0x07, 0x0F, 0x78, 0x60, 0xC6, 0x13, 0xB7, 0xF5,
        0x7F, 0x85, 0x1B, 0x24, 0x2E, 0x0C, 0xF4, 0x57, 0x9E, 0x27, 0x4D, 0xB7, 0xEA, 0x9F, 0x98, 0x8C,
        0xD8, 0x7B, 0x07, 0x3D, 0x3B, 0x4C, 0xBE, 0x31, 0x16, 0x20, 0xC0, 0xD3, 0x41, 0xA7, 0x6C, 0x9A,
        0x83, 0x06, 0x14, 0xAA, 0xC6, 0x73, 0xA6, 0x57, 0xD2, 0x55, 0xF4, 0x0C, 0x53, 0x8C, 0xF3, 0x37,
        0xE9, 0x63, 0x5F, 0x6F, 0x5B, 0xE6, 0xA5, 0x9A, 0xBF, 0x85, 0x45, 0x95, 0x35, 0x5E, 0xB7, 0xBE,
        0xB6, 0x1E, 0x97, 0x9B, 0xCD, 0x8C, 0xF2, 0x97, 0x36, 0x6D, 0xF8, 0x78, 0x58, 0x31, 0xC2, 0x6F,
        0x08, 0x29, 0xDD, 0xD9, 0x0D, 0xF2, 0x60, 0x58, 0x8A, 0xAB, 0xAC, 0xE8, 0x43, 0x10, 0x01, 0x56,
        0xF3, 0x1D, 0x79, 0x93, 0x29, 0x8E, 0x83, 0x3C, 0xAD, 0x5B, 0xC9, 0x7C, 0xA6, 0x13, 0x3F, 0x2E,
        0xB7, 0x8F, 0x0C, 0xB6, 0x6E, 0x23, 0xA2, 0xE1, 0x93, 0x90, 0x2F, 0xB8, 0x30, 0xAC, 0x20, 0xE5,
        0x88, 0xC9, 0x15, 0xB9, 0x97, 0x3E, 0x77, 0xF7, 0x0D, 0x5F, 0x96, 0x3B, 0xA2, 0xE8, 0x69, 0x40,
        0xE0, 0x7A, 0xEF, 0x4F, 0xE1, 0xF9, 0x11, 0xF4, 0x7C, 0xC8, 0x20, 0xC0, 0x17, 0x7F, 0xF4, 0xBD};

    unsigned char pri_e[TEST_RSA_KEY_SIZE] = {
        0x28, 0xCC, 0xD0, 0x0B, 0x9B, 0x14, 0xAD, 0x39, 0x3B, 0x1D, 0x9B, 0x80, 0x7A, 0x1B, 0xAF, 0x70,
        0x42, 0xC1, 0xE6, 0x39, 0x1F, 0x21, 0x48, 0x1D, 0xF1, 0x78, 0xFF, 0x59, 0x76, 0xE3, 0x63, 0x00,
        0xDD, 0x8D, 0xF5, 0x03, 0x6F, 0xF4, 0x2B, 0x92, 0x9A, 0x00, 0xB6, 0xCC, 0x44, 0x2A, 0xC3, 0xF0,
        0x7B, 0x0E, 0x11, 0xF4, 0x23, 0xCA, 0x74, 0x93, 0xE2, 0x68, 0x76, 0x06, 0xAD, 0x2B, 0xA4, 0xD6,
        0xB2, 0xD0, 0x44, 0x62, 0x8B, 0xE9, 0x8C, 0xA4, 0xD8, 0x3F, 0x0F, 0x95, 0x55, 0x56, 0x70, 0xAE,
        0x4D, 0xB8, 0xFA, 0xCA, 0x4E, 0x83, 0xE0, 0xE0, 0x6D, 0x63, 0x27, 0x27, 0x03, 0x8C, 0x07, 0xDE,
        0x79, 0xE2, 0x53, 0xAA, 0x7A, 0x88, 0xED, 0xBA, 0xE3, 0x73, 0x9A, 0x8D, 0x1F, 0x1A, 0x1D, 0xD3,
        0xDF, 0xF0, 0x34, 0x5F, 0x2C, 0xF4, 0xDB, 0x34, 0x1D, 0xAB, 0xEE, 0x81, 0xF3, 0x9E, 0x58, 0x65,
        0xB7, 0x4C, 0x49, 0x67, 0xEC, 0x62, 0x34, 0xB7, 0x78, 0x9A, 0x7E, 0x94, 0x74, 0xB5, 0xB1, 0x87,
        0x8C, 0x9E, 0x8D, 0x6D, 0x1C, 0x0A, 0xAE, 0x48, 0x41, 0x2C, 0x5B, 0x0B, 0x82, 0x03, 0x05, 0xB3,
        0x0B, 0x47, 0xCC, 0x6E, 0x19, 0xB2, 0xB1, 0xA0, 0x56, 0x7C, 0xE5, 0x77, 0x60, 0x45, 0xC1, 0x3F,
        0x80, 0xAF, 0xA8, 0x6C, 0xB6, 0x75, 0x1C, 0xE6, 0xF1, 0x18, 0xB6, 0xF9, 0xBE, 0xFB, 0xA3, 0xF0,
        0x38, 0x67, 0x3E, 0x3C, 0xF0, 0x35, 0x3D, 0x76, 0x5B, 0xFF, 0x49, 0x83, 0x46, 0xEC, 0xA0, 0x61,
        0x36, 0x0B, 0x54, 0x21, 0xED, 0x5B, 0x57, 0x70, 0xAC, 0xEA, 0xE0, 0x9C, 0xAA, 0xC3, 0x2D, 0x42,
        0x53, 0xD8, 0x03, 0xFD, 0x0B, 0x40, 0x9B, 0x40, 0xA0, 0x44, 0xD1, 0x4E, 0xFF, 0xB3, 0xD0, 0x9D,
        0x2C, 0x78, 0x58, 0x87, 0x77, 0x98, 0xEE, 0x14, 0x8B, 0xAE, 0x8E, 0x67, 0xD1, 0x95, 0xCC, 0x71};

    unsigned char pub_e[4] = {
        0x00, 0x01, 0x00, 0x01};

    Buffer buf_pri = {.ptr = pri_e, .size = sizeof(pri_e)};
    Buffer buf_pub = {.ptr = pub_e, .size = sizeof(pub_e)};
    Buffer buf_mod = {.ptr = mod_n, .size = sizeof(mod_n)};

	uint8_t sig[TEST_RSA_SIGNATURE_SIZEE] = {0};
    Buffer buf_sig = {.ptr = sig, .size = sizeof(sig)};

	rsa_pkcs1_sign(&buf_pri, &buf_pub, &buf_mod, &message, DIGEST_SHA256_SIZE, &buf_sig);
	print_hex("RSA PKCS#1 SIGNATURE", buf_sig.ptr, buf_sig.size);

	result = rsa_pkcs1_verify(&buf_pub, &buf_mod, &message, DIGEST_SHA256_SIZE, &buf_sig);
	ASSERT_EQ(result, true);
}


TEST_F(SignatureRsaTest, RSA_PSS)
{
	bool result = true;
	uint8_t pri_e[TEST_RSA_KEY_SIZE] = {0};
    uint8_t mod_n[TEST_RSA_KEY_SIZE] = {0};
    uint8_t pub_e[TEST_RSA_PUBLIC_EXPONENT_SIZE] = {0};

    Buffer buf_pri = {.ptr = pri_e, .size = sizeof(pri_e)};
    Buffer buf_pub = {.ptr = pub_e, .size = sizeof(pub_e)};
    Buffer buf_mod = {.ptr = mod_n, .size = sizeof(mod_n)};

	uint8_t sig[TEST_RSA_SIGNATURE_SIZEE] = {0};
    Buffer buf_sig = {.ptr = sig, .size = sizeof(sig)};

	generate_rsa_key(2048, &buf_pri, &buf_mod, &buf_pub);
	rsa_pss_sign(&buf_pri, &buf_pub, &buf_mod, &message, DIGEST_SHA256_SIZE, &buf_sig);
	print_hex("RSA PSS SIGNATURE", buf_sig.ptr, buf_sig.size);

	result = rsa_pss_verify(&buf_pub, &buf_mod, &message, DIGEST_SHA256_SIZE, &buf_sig);
	ASSERT_EQ(result, true);
}

TEST_F(SignatureRsaTest, RSA_PSS_FIXED_KEY)
{
	bool result = false;

	unsigned char mod_n[TEST_RSA_KEY_SIZE] = {
        0xEF, 0x5F, 0x69, 0xDA, 0xA5, 0xB9, 0x13, 0xC9, 0x82, 0x8B, 0xBD, 0xFF, 0xE0, 0x60, 0xA7, 0xD8,
        0xB9, 0x50, 0x8B, 0x0A, 0x7E, 0x2B, 0x8C, 0x86, 0x1A, 0x95, 0x3C, 0x16, 0xBD, 0x57, 0x4D, 0x3F,
        0xCD, 0xBC, 0xE3, 0x3C, 0x71, 0xB5, 0x29, 0xDA, 0x85, 0x28, 0x6E, 0xF1, 0x75, 0x42, 0x15, 0xC6,
        0xFB, 0x2A, 0x62, 0xD9, 0x17, 0x78, 0x3E, 0xC1, 0x83, 0xDD, 0x21, 0x27, 0x40, 0x30, 0x14, 0xC5,
        0x67, 0x46, 0xE6, 0x5C, 0xCC, 0xBF, 0x48, 0x41, 0xA7, 0xF8, 0xC1, 0x10, 0xEC, 0x3A, 0x7C, 0x63,
        0xED, 0xF8, 0x6D, 0x12, 0x2B, 0x4B, 0xA0, 0x13, 0x07, 0x0F, 0x78, 0x60, 0xC6, 0x13, 0xB7, 0xF5,
        0x7F, 0x85, 0x1B, 0x24, 0x2E, 0x0C, 0xF4, 0x57, 0x9E, 0x27, 0x4D, 0xB7, 0xEA, 0x9F, 0x98, 0x8C,
        0xD8, 0x7B, 0x07, 0x3D, 0x3B, 0x4C, 0xBE, 0x31, 0x16, 0x20, 0xC0, 0xD3, 0x41, 0xA7, 0x6C, 0x9A,
        0x83, 0x06, 0x14, 0xAA, 0xC6, 0x73, 0xA6, 0x57, 0xD2, 0x55, 0xF4, 0x0C, 0x53, 0x8C, 0xF3, 0x37,
        0xE9, 0x63, 0x5F, 0x6F, 0x5B, 0xE6, 0xA5, 0x9A, 0xBF, 0x85, 0x45, 0x95, 0x35, 0x5E, 0xB7, 0xBE,
        0xB6, 0x1E, 0x97, 0x9B, 0xCD, 0x8C, 0xF2, 0x97, 0x36, 0x6D, 0xF8, 0x78, 0x58, 0x31, 0xC2, 0x6F,
        0x08, 0x29, 0xDD, 0xD9, 0x0D, 0xF2, 0x60, 0x58, 0x8A, 0xAB, 0xAC, 0xE8, 0x43, 0x10, 0x01, 0x56,
        0xF3, 0x1D, 0x79, 0x93, 0x29, 0x8E, 0x83, 0x3C, 0xAD, 0x5B, 0xC9, 0x7C, 0xA6, 0x13, 0x3F, 0x2E,
        0xB7, 0x8F, 0x0C, 0xB6, 0x6E, 0x23, 0xA2, 0xE1, 0x93, 0x90, 0x2F, 0xB8, 0x30, 0xAC, 0x20, 0xE5,
        0x88, 0xC9, 0x15, 0xB9, 0x97, 0x3E, 0x77, 0xF7, 0x0D, 0x5F, 0x96, 0x3B, 0xA2, 0xE8, 0x69, 0x40,
        0xE0, 0x7A, 0xEF, 0x4F, 0xE1, 0xF9, 0x11, 0xF4, 0x7C, 0xC8, 0x20, 0xC0, 0x17, 0x7F, 0xF4, 0xBD};

    unsigned char pri_e[TEST_RSA_KEY_SIZE] = {
        0x28, 0xCC, 0xD0, 0x0B, 0x9B, 0x14, 0xAD, 0x39, 0x3B, 0x1D, 0x9B, 0x80, 0x7A, 0x1B, 0xAF, 0x70,
        0x42, 0xC1, 0xE6, 0x39, 0x1F, 0x21, 0x48, 0x1D, 0xF1, 0x78, 0xFF, 0x59, 0x76, 0xE3, 0x63, 0x00,
        0xDD, 0x8D, 0xF5, 0x03, 0x6F, 0xF4, 0x2B, 0x92, 0x9A, 0x00, 0xB6, 0xCC, 0x44, 0x2A, 0xC3, 0xF0,
        0x7B, 0x0E, 0x11, 0xF4, 0x23, 0xCA, 0x74, 0x93, 0xE2, 0x68, 0x76, 0x06, 0xAD, 0x2B, 0xA4, 0xD6,
        0xB2, 0xD0, 0x44, 0x62, 0x8B, 0xE9, 0x8C, 0xA4, 0xD8, 0x3F, 0x0F, 0x95, 0x55, 0x56, 0x70, 0xAE,
        0x4D, 0xB8, 0xFA, 0xCA, 0x4E, 0x83, 0xE0, 0xE0, 0x6D, 0x63, 0x27, 0x27, 0x03, 0x8C, 0x07, 0xDE,
        0x79, 0xE2, 0x53, 0xAA, 0x7A, 0x88, 0xED, 0xBA, 0xE3, 0x73, 0x9A, 0x8D, 0x1F, 0x1A, 0x1D, 0xD3,
        0xDF, 0xF0, 0x34, 0x5F, 0x2C, 0xF4, 0xDB, 0x34, 0x1D, 0xAB, 0xEE, 0x81, 0xF3, 0x9E, 0x58, 0x65,
        0xB7, 0x4C, 0x49, 0x67, 0xEC, 0x62, 0x34, 0xB7, 0x78, 0x9A, 0x7E, 0x94, 0x74, 0xB5, 0xB1, 0x87,
        0x8C, 0x9E, 0x8D, 0x6D, 0x1C, 0x0A, 0xAE, 0x48, 0x41, 0x2C, 0x5B, 0x0B, 0x82, 0x03, 0x05, 0xB3,
        0x0B, 0x47, 0xCC, 0x6E, 0x19, 0xB2, 0xB1, 0xA0, 0x56, 0x7C, 0xE5, 0x77, 0x60, 0x45, 0xC1, 0x3F,
        0x80, 0xAF, 0xA8, 0x6C, 0xB6, 0x75, 0x1C, 0xE6, 0xF1, 0x18, 0xB6, 0xF9, 0xBE, 0xFB, 0xA3, 0xF0,
        0x38, 0x67, 0x3E, 0x3C, 0xF0, 0x35, 0x3D, 0x76, 0x5B, 0xFF, 0x49, 0x83, 0x46, 0xEC, 0xA0, 0x61,
        0x36, 0x0B, 0x54, 0x21, 0xED, 0x5B, 0x57, 0x70, 0xAC, 0xEA, 0xE0, 0x9C, 0xAA, 0xC3, 0x2D, 0x42,
        0x53, 0xD8, 0x03, 0xFD, 0x0B, 0x40, 0x9B, 0x40, 0xA0, 0x44, 0xD1, 0x4E, 0xFF, 0xB3, 0xD0, 0x9D,
        0x2C, 0x78, 0x58, 0x87, 0x77, 0x98, 0xEE, 0x14, 0x8B, 0xAE, 0x8E, 0x67, 0xD1, 0x95, 0xCC, 0x71};

    unsigned char pub_e[4] = {
        0x00, 0x01, 0x00, 0x01};

    Buffer buf_pri = {.ptr = pri_e, .size = sizeof(pri_e)};
    Buffer buf_pub = {.ptr = pub_e, .size = sizeof(pub_e)};
    Buffer buf_mod = {.ptr = mod_n, .size = sizeof(mod_n)};

	uint8_t sig[TEST_RSA_SIGNATURE_SIZEE] = {0};
    Buffer buf_sig = {.ptr = sig, .size = sizeof(sig)};

	rsa_pss_sign(&buf_pri, &buf_pub, &buf_mod, &message, DIGEST_SHA256_SIZE, &buf_sig);
	print_hex("RSA PSS SIGNATURE", buf_sig.ptr, buf_sig.size);

	result = rsa_pss_verify(&buf_pub, &buf_mod, &message, DIGEST_SHA256_SIZE, &buf_sig);
	ASSERT_EQ(result, true);
}
